// generated by scripts/sqlite2cpp.py schema.sql include/generated/tables S3D::Schema
#ifndef S3D_SCHEMA_TABLES_H
#define S3D_SCHEMA_TABLES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace S3D
{
namespace Schema
{
  namespace Radius_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Magnitude
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "magnitude";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T magnitude;
            T& operator()() { return magnitude; }
            const T& operator()() const { return magnitude; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace Radius_

  struct Radius: sqlpp::table_t<Radius,
               Radius_::Deleted,
               Radius_::Timestamp,
               Radius_::Entity,
               Radius_::Magnitude>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "radius";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T radius;
        T& operator()() { return radius; }
        const T& operator()() const { return radius; }
      };
    };
  };
  namespace Coord_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct Z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T z;
            T& operator()() { return z; }
            const T& operator()() const { return z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  } // namespace Coord_

  struct Coord: sqlpp::table_t<Coord,
               Coord_::Deleted,
               Coord_::Timestamp,
               Coord_::Entity,
               Coord_::X,
               Coord_::Y,
               Coord_::Z>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "coord";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T coord;
        T& operator()() { return coord; }
        const T& operator()() const { return coord; }
      };
    };
  };
  namespace Setoperationtype_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Setoperationtype_

  struct Setoperationtype: sqlpp::table_t<Setoperationtype,
               Setoperationtype_::Deleted,
               Setoperationtype_::Timestamp,
               Setoperationtype_::Entity,
               Setoperationtype_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "setoperationtype";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T setoperationtype;
        T& operator()() { return setoperationtype; }
        const T& operator()() const { return setoperationtype; }
      };
    };
  };
  namespace Edge_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct EntityTo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity_to";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entityTo;
            T& operator()() { return entityTo; }
            const T& operator()() const { return entityTo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Edge_

  struct Edge: sqlpp::table_t<Edge,
               Edge_::Deleted,
               Edge_::Timestamp,
               Edge_::Entity,
               Edge_::EntityTo>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "edge";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T edge;
        T& operator()() { return edge; }
        const T& operator()() const { return edge; }
      };
    };
  };
  namespace Document_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Document
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "document";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T document;
            T& operator()() { return document; }
            const T& operator()() const { return document; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Document_

  struct Document: sqlpp::table_t<Document,
               Document_::Deleted,
               Document_::Timestamp,
               Document_::Entity,
               Document_::Type,
               Document_::Document>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "document";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T document;
        T& operator()() { return document; }
        const T& operator()() const { return document; }
      };
    };
  };
  namespace Name_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Name_

  struct Name: sqlpp::table_t<Name,
               Name_::Deleted,
               Name_::Timestamp,
               Name_::Entity,
               Name_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "name";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T name;
        T& operator()() { return name; }
        const T& operator()() const { return name; }
      };
    };
  };
  namespace Attribute_
  {
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleted;
            T& operator()() { return deleted; }
            const T& operator()() const { return deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Entity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entity;
            T& operator()() { return entity; }
            const T& operator()() const { return entity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Attrib
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attrib";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attrib;
            T& operator()() { return attrib; }
            const T& operator()() const { return attrib; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Size
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T size;
            T& operator()() { return size; }
            const T& operator()() const { return size; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Attribute_

  struct Attribute: sqlpp::table_t<Attribute,
               Attribute_::Deleted,
               Attribute_::Timestamp,
               Attribute_::Entity,
               Attribute_::Attrib,
               Attribute_::Size>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "attribute";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T attribute;
        T& operator()() { return attribute; }
        const T& operator()() const { return attribute; }
      };
    };
  };
} // namespace S3D
} // namespace Schema
#endif
